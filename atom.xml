<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Threshold的博客</title>
  <subtitle>Failure is not an option</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-04T15:13:16.526Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Threshold</name>
    <email>hsjfox@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java-RESTful-Web-Service实战-读书笔记</title>
    <link href="http://yoursite.com/2016/12/04/Java-RESTful-Web-Service-diary/"/>
    <id>http://yoursite.com/2016/12/04/Java-RESTful-Web-Service-diary/</id>
    <published>2016-12-04T10:10:01.000Z</published>
    <updated>2016-12-04T15:13:16.526Z</updated>
    
    <content type="html"><![CDATA[<p>本文是博主在读《Java RESTful Web Service 实战》的读书笔记。<br>欢迎读者拍砖。<br><a id="more"></a></p>
<h1 id="REST-请求处理"><a href="#REST-请求处理" class="headerlink" title="REST 请求处理"></a>REST 请求处理</h1><h2 id="Provides-注解"><a href="#Provides-注解" class="headerlink" title="@Provides 注解"></a>@Provides 注解</h2><p>Provider实例可以通过@Context注解被依赖注入到其他实例中。<br>Provides接口定义了四个方法。分别是用来获取MessageBodyReader、MessageBodyWriter、ExceptionMapper和ContextResolver实例。</p>
<h3 id="MessageBodyReader"><a href="#MessageBodyReader" class="headerlink" title="MessageBodyReader"></a>MessageBodyReader</h3><p> 将流转换为Java对象</p>
<ul>
<li>isReadable() 判断实现类能否支持将当前请求的数据类型反序列化。</li>
<li>readFrom() 用于处理反序列化。处理读取流并转换为Java类型对象的核心方法。</li>
</ul>
<h3 id="MessageBodyWriter"><a href="#MessageBodyWriter" class="headerlink" title="MessageBodyWriter"></a>MessageBodyWriter</h3><p> 将对象转换为流。</p>
<ul>
<li>isWriteable() 是否支持序列化当前请求的类型。</li>
<li>writeTo() 将请求对象写入流的序列化过程</li>
</ul>
<h2 id="REST-过滤器"><a href="#REST-过滤器" class="headerlink" title="REST 过滤器"></a>REST 过滤器</h2><p> 客户端请求过滤器（ClientRequestFilter） ——&gt; 服务器请求过滤器（ContainerRequestFilter）——&gt; 服务器响应过滤器(ContainerResponseFilter) ——&gt; 客户端响应过滤器（ClientResponseFilter）</p>
<ul>
<li><p>ClientRequestFilter 定义的过滤方法 filter()包含一个输入参数，是客户端请求的上下文类ClientRequestContext.可以从该上下文中获取请求信息。比如context.getMethod() context.getUri() context.getHeaders()  客户端请求过滤器常用于给客户端请求添加Authorization</p>
</li>
<li><p>ContainerRequestFilter 的实现类分为两种：预处理和后处理。 默认是后处理：即先执行容器接收请求操作，当服务器接收并处理请求后，流程才进入过滤器实现类的filter()方法。而预处理是在服务器处理接收到的请求之前就执行过滤。如果希望实现一个预处理的过滤器实现类，需要在类名上定义注解@PreMatching<br>filter()包含一个输入参数，即容器请求上下文类ContainerRequestContext</p>
</li>
<li><p>ContainerResponseFilter 定义的filter()方法包含两个输入参数，一个是容器请求上下文类 ContainerRequestContext ,另一个是容器响应上下文类 ContainerResponseContext</p>
</li>
<li><p>ClientResponseFilter定义的过滤方法filter()包含两个输入参数，一个是客户端请求的上下文类ClientRequestContext，另一个是客户端响应的上下文类ClientResponseContext </p>
</li>
</ul>
<h3 id="Priority-注解"><a href="#Priority-注解" class="headerlink" title="@Priority 注解"></a>@Priority 注解</h3><p> @Priority 是一个整型值。</p>
<ul>
<li>对于Request以及读写拦截器是按照升序策略，数值越小，优先级越高。</li>
<li>对于Response的拦截器是按照降序策略，数值越大，优先级越高</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是博主在读《Java RESTful Web Service 实战》的读书笔记。&lt;br&gt;欢迎读者拍砖。&lt;br&gt;
    
    </summary>
    
      <category term="RESTful Api" scheme="http://yoursite.com/categories/RESTful-Api/"/>
    
    
      <category term="RESTful" scheme="http://yoursite.com/tags/RESTful/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>重新认识Http方法</title>
    <link href="http://yoursite.com/2016/12/03/recognize-http-method/"/>
    <id>http://yoursite.com/2016/12/03/recognize-http-method/</id>
    <published>2016-12-03T06:00:08.000Z</published>
    <updated>2016-12-03T14:24:09.001Z</updated>
    
    <content type="html"><![CDATA[<p>Http 是在 TCP/IP 协议基础上的应用层协议。对于耳熟能详的GET/POST/PUT/DELETE方法，用对地方了吗？</p>
<a id="more"></a>
<h1 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h1><p>Get是只读的。他也是安全的，他不应该改变资源状态。多次读取的同一个资源总是得到相同的数据。</p>
<table>
<thead>
<tr>
<th>幂等性</th>
<th style="text-align:center">是</th>
</tr>
</thead>
<tbody>
<tr>
<td>Safety</td>
<td style="text-align:center">是</td>
</tr>
</tbody>
</table>
<h1 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h1><p>PUT是一种写操作。他和POST很像。</p>
<table>
<thead>
<tr>
<th>幂等性</th>
<th style="text-align:center">是</th>
</tr>
</thead>
<tbody>
<tr>
<td>Safety</td>
<td style="text-align:center">否</td>
</tr>
</tbody>
</table>
<p>任何一个写操作的Http动作都不是安全的。</p>
<h2 id="更新资源"><a href="#更新资源" class="headerlink" title="更新资源"></a>更新资源</h2><p>但PUT多次同一个资源，结果应该都是一致的。<br>所以对于更新资源的操作，用PUT是没有任何疑问的。</p>
<h2 id="添加资源"><a href="#添加资源" class="headerlink" title="添加资源"></a>添加资源</h2><p>资源的创建操作大部分情况都是客服端提供这个新资源的基础信息，然后服务器接收到资源后插入到数据库中，并且这个新资源在数据库中会获得一个自增长的唯一ID（也就是主键）。所以，创建操作大部分应当设计为POST.<br>但是，如果客户端提供资源的全部属性（包括这个资源的主键ID）且服务器不会对其修改，这样的创建请求确保了幂等性，应该用PUT.</p>
<p>简而言之：资源主键服务器由服务器提供时应当用POST（非幂等性）；资源所有属性由客户端提供时应当用PUT（幂等性）</p>
<h1 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h1><p>DELETE方法是幂等的：多次删除同一份数据（一般传递这个资源的ID值）对于数据库来讲所产生的改变是相同的。</p>
<table>
<thead>
<tr>
<th>幂等性</th>
<th style="text-align:center">是</th>
</tr>
</thead>
<tbody>
<tr>
<td>Safety</td>
<td style="text-align:center">是</td>
</tr>
</tbody>
</table>
<p>执行删除的资源方法可以定义为void，因为删除一个资源一般对资源都很了解了，没有必要将其从服务器上传回来。<br>可能有人要问了，没有返回值，我怎么知道删除成了没有？<br>Good question，Http响应码有个204（No Content）.删除成功返回这个状态码即可。<br>可能又有人要问了（哈哈，其实就是我问的。）对于多次删除同一个资源，第一次我知道删除成功要返回响应码204，那第二次再删除这个资源呢？我应该返回404（Not Found）还是仍然返回响应码204？<br>Nice question,这个也困惑博主我许久，我也特意Google了一下。原来不是我一个有这样的困惑,详见<a href="http://stackoverflow.com/questions/6439416/deleting-a-resource-using-http-delete" target="_blank" rel="external">StackOverflow</a>。解决这个问题其实也很简单，回到最初这个DELETE方法上来，他是幂等的，这就意味着多次调用都应该返回相同的结果，所以当这个资源已经被删除了，再次调用DELETE删除这个资源，也应返回204（No Content).</p>
<h1 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h1><p>POST 是一种写操作的HTTP请求，是用于创建、添加资源的。正如上文PUT方法里所说，所有写操作都是不安全的（状态改变了）。 而且POST也比较特殊，他也不是幂等的，每次请求对服务器端资源（数据库）状态的改变不是相同的。（可能又有人要问了，我每次POST的数据都一样啊，按理说资源改变应该是相同的啊，但是同学你想想，你POST的时候你提供这个资源的唯一身份（主键）了吗？这个一般都是数据库来生成的（通常是自增长），所以即使你认为你每次POST的数据都一样，但实际上都是不一样的，请读者自行揣摩。）</p>
<table>
<thead>
<tr>
<th>幂等性</th>
<th style="text-align:center">否</th>
</tr>
</thead>
<tbody>
<tr>
<td>Safety</td>
<td style="text-align:center">否</td>
</tr>
</tbody>
</table>
<p>当一个资源创建好后，应该返回201（Created），并在Response的请求头中加入Location，并指向这个新资源的地址。而不是一股脑的返回200 OK.</p>
<blockquote class="blockquote-center"><p>总结一下：<br>          GET方法用于读取/检索、查询/过滤一个资源；<br>          PUT方法用于修改/更新资源、创建客户端维护主键信息的资源；<br>          DELETE方法用于删除资源；<br>          POST方法用于创建资源。</p>
</blockquote>
<h1 id="Http响应码的选择"><a href="#Http响应码的选择" class="headerlink" title="Http响应码的选择"></a>Http响应码的选择</h1><p><img src="https://i.stack.imgur.com/0pDZI.png" alt="WhereToStart"><br><img src="https://i.stack.imgur.com/LayiK.png" alt="2XX/3XX"><br><img src="https://i.stack.imgur.com/UTpnp.png" alt="4XX"><br><img src="https://i.stack.imgur.com/Wy1rN.png" alt="5XX"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Http 是在 TCP/IP 协议基础上的应用层协议。对于耳熟能详的GET/POST/PUT/DELETE方法，用对地方了吗？&lt;/p&gt;
    
    </summary>
    
      <category term="RESTful Api" scheme="http://yoursite.com/categories/RESTful-Api/"/>
    
    
      <category term="RESTful" scheme="http://yoursite.com/tags/RESTful/"/>
    
      <category term="Http" scheme="http://yoursite.com/tags/Http/"/>
    
      <category term="Jersey" scheme="http://yoursite.com/tags/Jersey/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的安装使用兼GitHub Pages的搭建</title>
    <link href="http://yoursite.com/2016/12/02/hexo-practice/"/>
    <id>http://yoursite.com/2016/12/02/hexo-practice/</id>
    <published>2016-12-02T15:19:22.000Z</published>
    <updated>2016-12-04T09:16:23.924Z</updated>
    
    <content type="html"><![CDATA[<p>先就不说怎么安装node以及hexo了吧，这个网上比较多。<br>Google is your friend! Baidu is not!!!</p>
<p>update:本来想偷懒不想再写一遍，但是好记性不如烂笔头。时间长了记不住啊。索性就自己整理一下也把安装过程写上把。</p>
<a id="more"></a>
<h1 id="安装-amp-更新"><a href="#安装-amp-更新" class="headerlink" title="安装 &amp; 更新"></a>安装 &amp; 更新</h1><hr>
<h2 id="全新安装Hexo"><a href="#全新安装Hexo" class="headerlink" title="全新安装Hexo"></a>全新安装Hexo</h2><p>全程参见<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo官方文档</a><br>也可以参见[令狐葱]写的手册(<a href="http://jiji262.github.io/2016/04/15/2016-04-15-hexo-github-pages-blog/" target="_blank" rel="external">http://jiji262.github.io/2016/04/15/2016-04-15-hexo-github-pages-blog/</a>)</p>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p><a href="https://nodejs.org/download/" target="_blank" rel="external">下载Node.js</a><br>    参考地址：<a href="http://www.w3cschool.cc/nodejs/nodejs-install-setup.html" target="_blank" rel="external">安装Node.js</a></p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>下载地址：<a href="http://git-scm.com/download/" target="_blank" rel="external">http://git-scm.com/download/</a></p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>首先在D盘新建个hexo文件夹<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">d:</div><div class="line">cd d:\hexo</div><div class="line">npm <span class="keyword">install </span>hexo-cli -g</div><div class="line">hexo init <span class="keyword">blog</span></div><div class="line">cd <span class="keyword">blog</span></div><div class="line">npm <span class="keyword">install</span></div><div class="line">hexo g <span class="comment">#或者hexo generate</span></div><div class="line">hexo s <span class="comment">#或者hexo server</span></div></pre></td></tr></table></figure></p>
<p>cli是什么意思呢？ command-Line 的简写</p>
<p>以上操作后会在D盘hexo文件夹下生成blog文件夹</p>
<p>现在可以打开<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>来查看你的blog了。</p>
<h2 id="Hexo主题设置"><a href="#Hexo主题设置" class="headerlink" title="Hexo主题设置"></a>Hexo主题设置</h2><p>这里推荐博主正在用的NexT主题，如果大家有自己喜欢的请自行寻找配置。</p>
<p>NexT主题配置官方文档参见这里：<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a></p>
<p>这里简单说下官方文档中没有提到的本地搜索功能：<br>详情可参见<a href="https://github.com/iissnan/hexo-theme-next/wiki/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2" target="_blank" rel="external">GitHub NexT LocalSearch WiKi</a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-generator-searchdb <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<p>注意上面命令中的 –save参数。如果不加这个，你又会踩坑了。<br>然后在站点的 _config.yml中增加<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">search:</span></div><div class="line"><span class="symbol">  path:</span> search.xml</div><div class="line"><span class="symbol">  field:</span> post</div><div class="line"><span class="symbol">  format:</span> html</div><div class="line"><span class="symbol">  limit:</span> <span class="number">10000</span></div></pre></td></tr></table></figure></p>
<p>再简单说下怎么更新主题：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> themes/next</div><div class="line">git pull</div><div class="line">hexo <span class="keyword">g</span></div><div class="line">hexo <span class="built_in">s</span></div></pre></td></tr></table></figure></p>
<p>打开<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>查看吧。</p>
<h2 id="更新Hexo"><a href="#更新Hexo" class="headerlink" title="更新Hexo"></a>更新Hexo</h2><p>参见<a href="https://github.com/hexojs/hexo/issues/99" target="_blank" rel="external">Hexo update issue</a><br>进入你的blog目录，执行下面的语句更新hexo<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> update -g</div></pre></td></tr></table></figure></p>
<h2 id="Hexo-部署"><a href="#Hexo-部署" class="headerlink" title="Hexo 部署"></a>Hexo 部署</h2><p>hexo deploy可以部署到很多平台，具体可以参考这个链接. 如果部署到github，需要在配置文件_config.yml中作如下修改：</p>
<blockquote>
<p>deploy:<br>  type: git<br>  repo: git@github.com:username/username.github.io.git<br>  branch: master</p>
</blockquote>
<p>然后记得要现在命令行执行<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd hexo<span class="string">\blog</span></div><div class="line"></div><div class="line"><span class="built_in">npm</span> install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>这个npm命令是安装Hexo Git 部署的扩展，不安装这个是不能部署到GitHub上去的。</p>
<p>最后在命令行中执行<br>    hexo d<br>即可完成部署。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><hr>
<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><h3 id="新建草稿"><a href="#新建草稿" class="headerlink" title="新建草稿"></a>新建草稿</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="type">draft</span> <span class="keyword">new</span><span class="type"></span>-article</div></pre></td></tr></table></figure>
<p>回车执行后会在source/_drafts目录下生成一个new-article.md文件<br>使用你喜欢的文本编辑工具编写这个markdown文件吧。</p>
<blockquote>
<p>注意：在drafts目录下markdown文件默认是不会显示在你博客上的。需要手动publish才可以。<br>draft相当于草稿。</p>
</blockquote>
<h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo publish <span class="keyword">new</span><span class="type"></span>-article</div></pre></td></tr></table></figure>
<p>回车后会将new-article.md文件从_drafts目录移动到_posts目录，也就是发布了这个博文。</p>
<h3 id="新建并发布文章"><a href="#新建并发布文章" class="headerlink" title="新建并发布文章"></a>新建并发布文章</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="keyword">new</span>-arcticle-name</div></pre></td></tr></table></figure>
<p>这个命令会在_posts目录下新建个new-article-name.md的文章。<br>这个命令相当于前面两条命令：新建草稿和发布文章</p>
<h2 id="生成网页"><a href="#生成网页" class="headerlink" title="生成网页"></a>生成网页</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">generate</span></div></pre></td></tr></table></figure>
<p>也可以简写：<br>hexo g</p>
<h2 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">server</span></div></pre></td></tr></table></figure>
<p>也可以简写成:<br>hexo s</p>
<h2 id="清理资源"><a href="#清理资源" class="headerlink" title="清理资源"></a>清理资源</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo clean</span></div></pre></td></tr></table></figure>
<p>也可以简写成：<br>hexo cl</p>
<h2 id="发布到Github"><a href="#发布到Github" class="headerlink" title="发布到Github"></a>发布到Github</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo deploy</span></div></pre></td></tr></table></figure>
<p>也可以简写成：<br>hexo d<br>如果发布出错，检查你的配置文件以及是否添加了Access Key到Github上。</p>
<h2 id="一些命令简写和常用组合"><a href="#一些命令简写和常用组合" class="headerlink" title="一些命令简写和常用组合"></a>一些命令简写和常用组合</h2><p>###命令可以用&amp;连起来执行<br>比如我想先清理再生成再发布到Github，可以这么写命令<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">cl</span> &amp; hexo <span class="keyword">g</span> &amp; hexo <span class="built_in">d</span></div></pre></td></tr></table></figure></p>
<p>###常见简写<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo n == hexo <span class="keyword">new</span></div><div class="line">$ hexo g == hexo <span class="keyword">generate</span></div><div class="line">$ hexo s == hexo server</div><div class="line">$ hexo d == hexo deploy</div></pre></td></tr></table></figure></p>
<p>###常用组合<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>hexo d -g <span class="comment">#生成部署</span></div><div class="line"><span class="variable">$ </span>hexo s -g <span class="comment">#生成预览</span></div></pre></td></tr></table></figure></p>
<p>###其他命令<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo --version <span class="meta">#查看hexo版本</span></div><div class="line">$ hexo <span class="keyword">new</span> <span class="type">article</span>-name <span class="meta">#新建发布文章</span></div><div class="line">$ hexo <span class="keyword">new</span> <span class="type">page</span> article-name <span class="meta">#新建页面</span></div><div class="line">$ hexo <span class="keyword">new</span> <span class="type">draft</span> article-name <span class="meta">#新建草稿</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先就不说怎么安装node以及hexo了吧，这个网上比较多。&lt;br&gt;Google is your friend! Baidu is not!!!&lt;/p&gt;
&lt;p&gt;update:本来想偷懒不想再写一遍，但是好记性不如烂笔头。时间长了记不住啊。索性就自己整理一下也把安装过程写上把。&lt;/p&gt;
    
    </summary>
    
      <category term="工具使用" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>IntellijIdea/JRebel 激活</title>
    <link href="http://yoursite.com/2016/12/02/intellij-idea-activate/"/>
    <id>http://yoursite.com/2016/12/02/intellij-idea-activate/</id>
    <published>2016-12-02T13:30:00.000Z</published>
    <updated>2016-12-02T15:23:23.886Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Intelligent Idea Ultimate版激活以及JRebel的激活.<br>仅供学习交流！喜欢这两大利器的朋友请支持正版！</p>
<a id="more"></a>
<h1 id="IntelliJIdea-激活"><a href="#IntelliJIdea-激活" class="headerlink" title="IntelliJIdea 激活"></a>IntelliJIdea 激活</h1><p>激活服务器地址<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span><span class="comment">//idea.imsxm.com/</span></div></pre></td></tr></table></figure></p>
<p><img src="/assets/archivesImg/2016-12-02/ideaLicenceServer.png" alt="ideaLicenseServer.png"></p>
<h1 id="JRebel-激活"><a href="#JRebel-激活" class="headerlink" title="JRebel 激活"></a>JRebel 激活</h1><p>不废话，打开下面的网址<br><a href="https://my.jrebel.com/account/how-to-activate" target="_blank" rel="external">https://my.jrebel.com/account/how-to-activate</a><br>用你的Facebook或者Twitter账号登录，然后就可以获取注册码了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Intelligent Idea Ultimate版激活以及JRebel的激活.&lt;br&gt;仅供学习交流！喜欢这两大利器的朋友请支持正版！&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="intellij" scheme="http://yoursite.com/tags/intellij/"/>
    
      <category term="JRebel" scheme="http://yoursite.com/tags/JRebel/"/>
    
      <category term="activate" scheme="http://yoursite.com/tags/activate/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/12/02/hello-world/"/>
    <id>http://yoursite.com/2016/12/02/hello-world/</id>
    <published>2016-12-02T05:04:15.000Z</published>
    <updated>2016-12-03T05:50:29.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-World-Hello-Hexo-GitHub-Pages"><a href="#Hello-World-Hello-Hexo-GitHub-Pages" class="headerlink" title="Hello, World. Hello Hexo, GitHub Pages."></a>Hello, World. Hello Hexo, GitHub Pages.</h1><p><img src="/assets/archivesImg/2016-12-02/ali.jpg" alt="ali.jpg"><br><a id="more"></a><br>我的GitHub Pages终于搭建好了。</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println(<span class="string">"Hello World!"</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>感谢<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>框架，感谢漂亮的<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">Next</a>主题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hello-World-Hello-Hexo-GitHub-Pages&quot;&gt;&lt;a href=&quot;#Hello-World-Hello-Hexo-GitHub-Pages&quot; class=&quot;headerlink&quot; title=&quot;Hello, World. Hello Hexo, GitHub Pages.&quot;&gt;&lt;/a&gt;Hello, World. Hello Hexo, GitHub Pages.&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/assets/archivesImg/2016-12-02/ali.jpg&quot; alt=&quot;ali.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="gitpages" scheme="http://yoursite.com/tags/gitpages/"/>
    
  </entry>
  
</feed>
